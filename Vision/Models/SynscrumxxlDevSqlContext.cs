// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Vision.Models
{
    public partial class SynscrumxxlDevSqlContext : DbContext
    {
        public SynscrumxxlDevSqlContext()
        {
        }

        public SynscrumxxlDevSqlContext(DbContextOptions<SynscrumxxlDevSqlContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AutoTaskStatus> AutoTaskStatus { get; set; }
        public virtual DbSet<BillingCode> BillingCode { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<ModelSyncedDateTime> ModelSyncedDateTime { get; set; }
        public virtual DbSet<Phase> Phase { get; set; }
        public virtual DbSet<Project> Project { get; set; }
        public virtual DbSet<Queue> Queue { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<ScrumStatus> ScrumStatus { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
        public virtual DbSet<Sprint> Sprint { get; set; }
        public virtual DbSet<TeamMember> TeamMember { get; set; }
        public virtual DbSet<TeamMemberRole> TeamMemberRole { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserFilter> UserFilter { get; set; }
        public virtual DbSet<WorkflowStep> WorkflowStep { get; set; }
        public virtual DbSet<WorkflowStep2TeamMember> WorkflowStep2TeamMember { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AutoTaskStatus>(entity =>
            {
                entity.Property(e => e.AutoTaskStatusId).ValueGeneratedNever();

                entity.Property(e => e.AutoTaskStatusText)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ScrumStatus)
                    .WithMany(p => p.AutoTaskStatus)
                    .HasForeignKey(d => d.ScrumStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutoTaskStatus_ScrumStatus");
            });

            modelBuilder.Entity<BillingCode>(entity =>
            {
                entity.Property(e => e.BillingCodeId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCategoryId).HasColumnName("TaxCategoryID");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.Property(e => e.CompanyId).ValueGeneratedNever();

                entity.Property(e => e.ChangedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.Property(e => e.DepartmentId).ValueGeneratedNever();

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ModelSyncedDateTime>(entity =>
            {
                entity.HasKey(e => e.Model);

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.LastSyncedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Phase>(entity =>
            {
                entity.Property(e => e.PhaseId).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.LastActivityDateTime).HasColumnType("datetime");

                entity.Property(e => e.PhaseNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Phase)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Phase_Project");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.Property(e => e.ProjectId).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.LastActivityDateTime).HasColumnType("datetime");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Project)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Project_Company");
            });

            modelBuilder.Entity<Queue>(entity =>
            {
                entity.Property(e => e.QueueId).ValueGeneratedNever();

                entity.Property(e => e.QueueName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.RoleId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScrumStatus>(entity =>
            {
                entity.Property(e => e.ScrumStatusId).ValueGeneratedNever();

                entity.Property(e => e.ScrumStatusText)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.AutoTaskDefaultStatusNavigation)
                    .WithMany(p => p.ScrumStatusNavigation)
                    .HasForeignKey(d => d.AutoTaskDefaultStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScrumStatus_AutoTaskStatus");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.HasKey(e => e.DbKey);

                entity.Property(e => e.DbKey)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DbValue)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sprint>(entity =>
            {
                entity.Property(e => e.SprintId).ValueGeneratedNever();

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<TeamMember>(entity =>
            {
                entity.Property(e => e.TeamMemberId).ValueGeneratedNever();

                entity.Property(e => e.ChangedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TeamMemberRole>(entity =>
            {
                entity.Property(e => e.TeamMemberRoleId).ValueGeneratedNever();

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.TeamMemberRole)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_TeamMemberRole_Department");

                entity.HasOne(d => d.Queue)
                    .WithMany(p => p.TeamMemberRole)
                    .HasForeignKey(d => d.QueueId)
                    .HasConstraintName("FK_TeamMemberRole_Queue");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.TeamMemberRole)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeamMemberRole_Role");

                entity.HasOne(d => d.TeamMember)
                    .WithMany(p => p.TeamMemberRole)
                    .HasForeignKey(d => d.TeamMemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeamMemberRole_TeamMember");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Email);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Firstname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Lastname)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserFilter>(entity =>
            {
                entity.HasKey(e => e.FilterId);

                entity.Property(e => e.Entity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkflowStep>(entity =>
            {
                entity.Property(e => e.WorkflowStepId).ValueGeneratedNever();

                entity.Property(e => e.AutotaskNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChangedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.AssignedRole)
                    .WithMany(p => p.WorkflowStep)
                    .HasForeignKey(d => d.AssignedRoleId)
                    .HasConstraintName("FK_WorkflowStep_Role");

                entity.HasOne(d => d.AssignedTeamMember)
                    .WithMany(p => p.WorkflowStep)
                    .HasForeignKey(d => d.AssignedTeamMemberId)
                    .HasConstraintName("FK_WorkflowStep_TeamMember");

                entity.HasOne(d => d.AutotaskStatus)
                    .WithMany(p => p.WorkflowStep)
                    .HasForeignKey(d => d.AutotaskStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkflowStep_AutoTaskStatus");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.WorkflowStep)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkflowStep_Company");

                entity.HasOne(d => d.Phase)
                    .WithMany(p => p.WorkflowStep)
                    .HasForeignKey(d => d.PhaseId)
                    .HasConstraintName("FK_WorkflowStep_Phase");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.WorkflowStep)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_WorkflowStep_Project3");

                entity.HasOne(d => d.Queue)
                    .WithMany(p => p.WorkflowStep)
                    .HasForeignKey(d => d.QueueId)
                    .HasConstraintName("FK_WorkflowStep_Queue");

                entity.HasOne(d => d.Sprint)
                    .WithMany(p => p.WorkflowStep)
                    .HasForeignKey(d => d.SprintId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkflowStep_Sprint");
            });

            modelBuilder.Entity<WorkflowStep2TeamMember>(entity =>
            {
                entity.HasKey(e => new { e.WorkflowStepId, e.TeamMemberId, e.RoleId });

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.WorkflowStep2TeamMember)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkflowStep2TeamMember_Role");

                entity.HasOne(d => d.TeamMember)
                    .WithMany(p => p.WorkflowStep2TeamMember)
                    .HasForeignKey(d => d.TeamMemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkflowS__TeamM__15A53433");

                entity.HasOne(d => d.WorkflowStep)
                    .WithMany(p => p.WorkflowStep2TeamMember)
                    .HasForeignKey(d => d.WorkflowStepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkflowS__Workf__70A8B9AE");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}